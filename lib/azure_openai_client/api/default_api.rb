# frozen_string_literal: true

=begin
#Azure OpenAI Service API

#Azure OpenAI APIs for completions and search

OpenAPI spec version: 2023-05-15

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.42
=end

module AzureOpenaiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates a completion for the chat message
    # @param body
    # @param api_version
    # @param deployment_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def chat_completions_create(body, api_version, deployment_id, opts = {})
      data, _status_code, _headers = chat_completions_create_with_http_info(body, api_version, deployment_id, opts)
      data
    end

    # Creates a completion for the chat message
    # @param body
    # @param api_version
    # @param deployment_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def chat_completions_create_with_http_info(body, api_version, deployment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.chat_completions_create ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.chat_completions_create"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DefaultApi.chat_completions_create"
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DefaultApi.chat_completions_create"
      end
      # resource path
      local_var_path = '/deployments/{deployment-id}/chat/completions'.sub('{' + 'deployment-id' + '}', deployment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body)

      return_type = opts[:return_type] || 'InlineResponse2002'

      auth_names = opts[:auth_names] || ['apiKey', 'bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#chat_completions_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a completion for the provided prompt, parameters and chosen model.
    # @param body
    # @param api_version
    # @param deployment_id
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def completions_create(body, api_version, deployment_id, opts = {})
      data, _status_code, _headers = completions_create_with_http_info(body, api_version, deployment_id, opts)
      data
    end

    # Creates a completion for the provided prompt, parameters and chosen model.
    # @param body
    # @param api_version
    # @param deployment_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def completions_create_with_http_info(body, api_version, deployment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.completions_create ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.completions_create"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DefaultApi.completions_create"
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DefaultApi.completions_create"
      end
      # resource path
      local_var_path = '/deployments/{deployment-id}/completions'.sub('{' + 'deployment-id' + '}', deployment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body)

      return_type = opts[:return_type] || 'InlineResponse200'

      auth_names = opts[:auth_names] || ['apiKey', 'bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#completions_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.
    # @param body
    # @param api_version
    # @param deployment_id The deployment id of the model which was deployed.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2001]
    def embeddings_create(body, api_version, deployment_id, opts = {})
      data, _status_code, _headers = embeddings_create_with_http_info(body, api_version, deployment_id, opts)
      data
    end

    # Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.
    # @param body
    # @param api_version
    # @param deployment_id The deployment id of the model which was deployed.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def embeddings_create_with_http_info(body, api_version, deployment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.embeddings_create ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DefaultApi.embeddings_create"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DefaultApi.embeddings_create"
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DefaultApi.embeddings_create"
      end
      # resource path
      local_var_path = '/deployments/{deployment-id}/embeddings'.sub('{' + 'deployment-id' + '}', deployment_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body)

      return_type = opts[:return_type] || 'InlineResponse2001'

      auth_names = opts[:auth_names] || ['apiKey', 'bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#embeddings_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
