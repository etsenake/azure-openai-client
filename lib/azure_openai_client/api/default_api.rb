=begin
#Azure OpenAI Service API

#Azure OpenAI APIs for completions and search

The version of the OpenAPI document: 2023-05-15

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module AzureOpenaiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a completion for the chat message
    # @param deployment_id [String] 
    # @param api_version [String] 
    # @param chat_completions_create_request [ChatCompletionsCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ChatCompletionsCreate200Response]
    def chat_completions_create(deployment_id, api_version, chat_completions_create_request, opts = {})
      data, _status_code, _headers = chat_completions_create_with_http_info(deployment_id, api_version, chat_completions_create_request, opts)
      data
    end

    # Creates a completion for the chat message
    # @param deployment_id [String] 
    # @param api_version [String] 
    # @param chat_completions_create_request [ChatCompletionsCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChatCompletionsCreate200Response, Integer, Hash)>] ChatCompletionsCreate200Response data, response status code and response headers
    def chat_completions_create_with_http_info(deployment_id, api_version, chat_completions_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.chat_completions_create ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DefaultApi.chat_completions_create"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DefaultApi.chat_completions_create"
      end
      # verify the required parameter 'chat_completions_create_request' is set
      if @api_client.config.client_side_validation && chat_completions_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'chat_completions_create_request' when calling DefaultApi.chat_completions_create"
      end
      # resource path
      local_var_path = '/deployments/{deployment-id}/chat/completions'.sub('{' + 'deployment-id' + '}', CGI.escape(deployment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(chat_completions_create_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ChatCompletionsCreate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearer']

      new_options = opts.merge(
        :operation => :"DefaultApi.chat_completions_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#chat_completions_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a completion for the provided prompt, parameters and chosen model.
    # @param deployment_id [String] 
    # @param api_version [String] 
    # @param completions_create_request [CompletionsCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CompletionsCreate200Response]
    def completions_create(deployment_id, api_version, completions_create_request, opts = {})
      data, _status_code, _headers = completions_create_with_http_info(deployment_id, api_version, completions_create_request, opts)
      data
    end

    # Creates a completion for the provided prompt, parameters and chosen model.
    # @param deployment_id [String] 
    # @param api_version [String] 
    # @param completions_create_request [CompletionsCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CompletionsCreate200Response, Integer, Hash)>] CompletionsCreate200Response data, response status code and response headers
    def completions_create_with_http_info(deployment_id, api_version, completions_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.completions_create ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DefaultApi.completions_create"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DefaultApi.completions_create"
      end
      # verify the required parameter 'completions_create_request' is set
      if @api_client.config.client_side_validation && completions_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'completions_create_request' when calling DefaultApi.completions_create"
      end
      # resource path
      local_var_path = '/deployments/{deployment-id}/completions'.sub('{' + 'deployment-id' + '}', CGI.escape(deployment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(completions_create_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CompletionsCreate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearer']

      new_options = opts.merge(
        :operation => :"DefaultApi.completions_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#completions_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.
    # @param deployment_id [String] The deployment id of the model which was deployed.
    # @param api_version [String] 
    # @param request_body [Hash<String, Object>] 
    # @param [Hash] opts the optional parameters
    # @return [EmbeddingsCreate200Response]
    def embeddings_create(deployment_id, api_version, request_body, opts = {})
      data, _status_code, _headers = embeddings_create_with_http_info(deployment_id, api_version, request_body, opts)
      data
    end

    # Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.
    # @param deployment_id [String] The deployment id of the model which was deployed.
    # @param api_version [String] 
    # @param request_body [Hash<String, Object>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmbeddingsCreate200Response, Integer, Hash)>] EmbeddingsCreate200Response data, response status code and response headers
    def embeddings_create_with_http_info(deployment_id, api_version, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.embeddings_create ...'
      end
      # verify the required parameter 'deployment_id' is set
      if @api_client.config.client_side_validation && deployment_id.nil?
        fail ArgumentError, "Missing the required parameter 'deployment_id' when calling DefaultApi.embeddings_create"
      end
      # verify the required parameter 'api_version' is set
      if @api_client.config.client_side_validation && api_version.nil?
        fail ArgumentError, "Missing the required parameter 'api_version' when calling DefaultApi.embeddings_create"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling DefaultApi.embeddings_create"
      end
      # resource path
      local_var_path = '/deployments/{deployment-id}/embeddings'.sub('{' + 'deployment-id' + '}', CGI.escape(deployment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'api-version'] = api_version

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'EmbeddingsCreate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'bearer']

      new_options = opts.merge(
        :operation => :"DefaultApi.embeddings_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#embeddings_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
